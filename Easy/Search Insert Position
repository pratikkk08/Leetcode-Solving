Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [1,3,5,6], target = 5
Output: 2
Example 2:

Input: nums = [1,3,5,6], target = 2
Output: 1
Example 3:

Input: nums = [1,3,5,6], target = 7
Output: 4
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums contains distinct values sorted in ascending order.
-104 <= target <= 104


//CODE

package day6;

public class Search_Insert_Position {
	public static int binarySearch(int[] nums, int target) {
        int left = 0, right = nums.length - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2; // safe from overflow

            if (nums[mid] == target) {
                return mid; // ðŸŽ¯ found
            } else if (nums[mid] < target) {
                left = mid + 1; // search right half
            } else {
                right = mid - 1; // search left half
            }
        }
        return left;
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] nums = {1, 3, 5, 7, 9};

        System.out.println(binarySearch(nums, 7)); // 3
        System.out.println(binarySearch(nums, 6)); // 3


	}

}
