Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).

Implement the MyQueue class:

void push(int x) Pushes element x to the back of the queue.
int pop() Removes the element from the front of the queue and returns it.
int peek() Returns the element at the front of the queue.
boolean empty() Returns true if the queue is empty, false otherwise.
Notes:

You must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid.
Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.
 

Example 1:

Input
["MyQueue", "push", "push", "peek", "pop", "empty"]
[[], [1], [2], [], [], []]
Output
[null, null, null, 1, 1, false]

Explanation
MyQueue myQueue = new MyQueue();
myQueue.push(1); // queue is: [1]
myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)
myQueue.peek(); // return 1
myQueue.pop(); // return 1, queue is [2]
myQueue.empty(); // return false
 

Constraints:

1 <= x <= 9
At most 100 calls will be made to push, pop, peek, and empty.
All the calls to pop and peek are valid.
 

//CODE
package day25;
import java.util.*;
public class QueueUsingStacks {
	static class MyQueue {
	    private Stack<Integer> inStack;
	    private Stack<Integer> outStack;

	    public MyQueue() {
	        inStack = new Stack<>();
	        outStack = new Stack<>();
	    }

	    // Enqueue (push element to the back of queue)
	    public void enqueue(int x) {
	        inStack.push(x);
	    }

	    // Dequeue (remove element from the front of queue)
	    public int dequeue() {
	        if (outStack.isEmpty()) {
	            while (!inStack.isEmpty()) {
	                outStack.push(inStack.pop());
	            }
	        }
	        if (outStack.isEmpty()) {
	            throw new RuntimeException("Queue is empty!");
	        }
	        return outStack.pop();
	    }

	    // Peek (get the front element without removing)
	    public int peek() {
	        if (outStack.isEmpty()) {
	            while (!inStack.isEmpty()) {
	                outStack.push(inStack.pop());
	            }
	        }
	        if (outStack.isEmpty()) {
	            throw new RuntimeException("Queue is empty!");
	        }
	        return outStack.peek();
	    }

	    // Check if queue is empty
	    public boolean isEmpty() {
	        return inStack.isEmpty() && outStack.isEmpty();
	    }
	}


	public static void main(String[] args) {
		// TODO Auto-generated method stub
		 MyQueue q = new MyQueue();

	        // Example dry run same as we did earlier
	        q.enqueue(1);
	        q.enqueue(2);
	        q.enqueue(3);

	        System.out.println("Dequeue: " + q.dequeue()); // 1
	        System.out.println("Dequeue: " + q.dequeue()); // 2

	        q.enqueue(4);

	        System.out.println("Dequeue: " + q.dequeue()); // 3
	        System.out.println("Peek: " + q.peek());       // 4
	        System.out.println("Dequeue: " + q.dequeue()); // 4

	        // Check empty
	        System.out.println("Is queue empty? " + q.isEmpty()); // true

	}

}

