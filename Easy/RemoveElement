/**
 * Problem: Remove Element
 * 
 * Given an integer array nums and an integer val, remove all occurrences of val in-place.
 * Return the number of elements not equal to val. The order of elements can be changed.
 * 
 * Example:
 * Input: nums = [3,2,2,3], val = 3
 * Output: 2, nums = [2,2,_,_]
 * 
 * Constraints:
 * - 0 <= nums.length <= 100
 * - 0 <= nums[i] <= 50
 * - 0 <= val <= 100
 */
public class RemoveElement {

    public static void main(String[] args) {
        int[] nums = {3, 2, 2, 3};
        int val = 3;

        int k = removeElement(nums, val);
        System.out.println("k = " + k);
        
        System.out.print("Modified nums = ");
        for (int i = 0; i < k; i++) {
            System.out.print(nums[i] + " ");
        }
    }

    /**
     * Removes all occurrences of val in-place and returns new length (k).
     * The first k elements will be those not equal to val.
     *
     * @param nums The input array
     * @param val The value to remove
     * @return The count of elements not equal to val
     */
    public static int removeElement(int[] nums, int val) {
        int start = 0;
        int end = nums.length - 1;

        while (start <= end) {
            while (start <= end && nums[start] != val) {
                start++;
            }
            while (start <= end && nums[end] == val) {
                end--;
            }
            if (start < end) {
                // Swap unwanted val with a valid number from end
                int temp = nums[start];
                nums[start] = nums[end];
                nums[end] = temp;
                start++;
                end--;
            }
        }

        return start; // new length (number of elements not equal to val)
    }
}
