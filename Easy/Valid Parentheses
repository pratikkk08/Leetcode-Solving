Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"

Output: true

Example 2:

Input: s = "()[]{}"

Output: true

Example 3:

Input: s = "(]"

Output: false

Example 4:

Input: s = "([])"

Output: true

Example 5:

Input: s = "([)]"

Output: false

 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.


//CODE

package day22;
import java.util.*;
public class ValidParentheses {
	public static boolean isValid(String s) {
        // Map of closing to opening brackets
        Map<Character, Character> map = new HashMap<>();
        map.put(')', '(');
        map.put('}', '{');
        map.put(']', '[');

        // Stack to keep track of opening brackets
        Stack<Character> stack = new Stack<>();

        // Traverse each character
        for (char ch : s.toCharArray()) {
            if (map.containsKey(ch)) { // if it's a closing bracket
                // if stack is empty, or top doesn't match â†’ invalid
                if (stack.isEmpty() || stack.pop() != map.get(ch)) {
                    return false;
                }
            } else { // opening bracket
                stack.push(ch);
            }
        }

        // At the end, stack must be empty
        return stack.isEmpty();
    }

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String s = "{[()]}";
        System.out.println(isValid(s));

	}

}


}
