Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

Example:1
Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]

Example 2:
Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]
 

Constraints:

The number of nodes in the list is n.
1 <= k <= n <= 5000
0 <= Node.val <= 1000
 

Follow-up: Can you solve the problem in O(1) extra memory space?

//CODE

package day19;

public class ReverseKGroupRecursive {
	 public ListNode reverseKGroup(ListNode head, int k) {
	        if (head == null) return null;

	        // 1) Check whether there are at least k nodes
	        ListNode node = head;
	        int count = 0;
	        while (node != null && count < k) {
	            node = node.next;
	            count++;
	        }
	        if (count < k) {
	            // fewer than k nodes: do not reverse
	            return head;
	        }

	        // 2) Reverse first k nodes
	        ListNode prev = null;
	        ListNode curr = head;
	        for (int i = 0; i < k; i++) {
	            ListNode nxt = curr.next;
	            curr.next = prev;
	            prev = curr;
	            curr = nxt;
	        }
	        // prev is new head of this reversed block
	        // curr is head of remaining list (nextSegmentHead)

	        // 3) Recurse on the remaining list and attach
	        head.next = reverseKGroup(curr, k);

	        // 4) Return new head of reversed block
	        return prev;
	    }

	    // helper to print list
	    public void printList(ListNode head) {
	        ListNode t = head;
	        while (t != null) {
	            System.out.print(t.val + (t.next != null ? " → " : ""));
	            t = t.next;
	        }
	        System.out.println();
	    }

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		 // example: 1 → 2 → 3 → 4 → 5, k = 2
        ListNode h = new ListNode(1);
        h.next = new ListNode(2);
        h.next.next = new ListNode(3);
        h.next.next.next = new ListNode(4);
        h.next.next.next.next = new ListNode(5);

        ReverseKGroupRecursive sol = new ReverseKGroupRecursive();
        System.out.print("Original: ");
        sol.printList(h);

        ListNode res = sol.reverseKGroup(h, 2);
        System.out.print("Reversed in groups of 2 (recursive): ");
        sol.printList(res);

	}

}
