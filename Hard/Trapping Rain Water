Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

 

Example 1:


Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9
 

Constraints:

n == height.length
1 <= n <= 2 * 104
0 <= height[i] <= 105


//CODE

package day4;

public class Trapping_Rain_Water {
	public static int trap(int[] height) {
        int n = height.length;
        if (n < 3) return 0;

        int left = 0, right = n - 1;
        int maxLeft = 0, maxRight = 0;
        int water = 0;

        while (left < right) {
            if (height[left] < height[right]) {
                // Left side is the limiting boundary
                if (height[left] >= maxLeft) {
                    maxLeft = height[left];
                } else {
                    water += (maxLeft - height[left]);
                }
                left++;
            } else {
                // Right side is the limiting boundary
                if (height[right] >= maxRight) {
                    maxRight = height[right];
                } else {
                    water += (maxRight - height[right]);
                }
                right--;
            }
        }
        return water;
    }

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		 int[] h = {0,1,0,2,1,0,1,3,2,1,2,1};
	        System.out.println(trap(h)); 

	}

}
