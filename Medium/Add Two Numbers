You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.

//CODE

package day13;
class ListNode {
    int val;
    ListNode next;
    ListNode(int val) { this.val = val; this.next = null; }
}
public class AddTwoNumbers {
	 public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
	        ListNode dummy = new ListNode(-1); // dummy head
	        ListNode curr = dummy;
	        int carry = 0;

	        while (l1 != null || l2 != null || carry != 0) {
	            int x = (l1 != null) ? l1.val : 0; // digit from l1
	            int y = (l2 != null) ? l2.val : 0; // digit from l2

	            int sum = x + y + carry; 
	            carry = sum / 10; // new carry
	            int digit = sum % 10; // digit to store

	            curr.next = new ListNode(digit); // create node
	            curr = curr.next;

	            if (l1 != null) l1 = l1.next; // move pointers
	            if (l2 != null) l2 = l2.next;
	        }

	        return dummy.next; // head of result list
	    }
	 
	 public void printList(ListNode head) {
	        ListNode t = head;
	        while (t != null) {
	            System.out.print(t.val + " → ");
	            t = t.next;
	        }
	        System.out.println("null");
	    }


	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// First number: 342 (stored as 2 → 4 → 3)
        ListNode l1 = new ListNode(2);
        l1.next = new ListNode(4);
        l1.next.next = new ListNode(3);

        // Second number: 465 (stored as 5 → 6 → 4)
        ListNode l2 = new ListNode(5);
        l2.next = new ListNode(6);
        l2.next.next = new ListNode(4);

        AddTwoNumbers obj = new AddTwoNumbers();
        System.out.print("l1: ");
        obj.printList(l1);
        System.out.print("l2: ");
        obj.printList(l2);

        ListNode result = obj.addTwoNumbers(l1, l2);
        System.out.print("Sum: ");
        obj.printList(result);

	}

}
