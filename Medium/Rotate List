Given the head of a linked list, rotate the list to the right by k places.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]
Example 2:


Input: head = [0,1,2], k = 4
Output: [2,0,1]
 

Constraints:

The number of nodes in the list is in the range [0, 500].
-100 <= Node.val <= 100
0 <= k <= 2 * 109

//CODE

package day16;
class ListNode {
    int val;
    ListNode next;
    ListNode(int val) { this.val = val; this.next = null; }
}
public class RotateList {
	public ListNode rotateRight(ListNode head, int k) {
        if (head == null || head.next == null || k == 0) return head;

        // Step 1: Find length and tail
        int len = 1;
        ListNode tail = head;
        while (tail.next != null) {
            tail = tail.next;
            len++;
        }

        // Step 2: Make it circular
        tail.next = head;

        // Step 3: Effective rotation (avoid unnecessary full rotations)
        k = k % len;
        if (k == 0) {
            tail.next = null; // break the circle back
            return head;
        }

        // Step 4: Find new tail = (len - k - 1) steps from head
        int stepsToNewTail = len - k - 1;
        ListNode newTail = head;
        for (int i = 0; i < stepsToNewTail; i++) {
            newTail = newTail.next;
        }

        // Step 5: New head is next of newTail
        ListNode newHead = newTail.next;

        // Step 6: Break the circle
        newTail.next = null;

        return newHead;
    }

    // helper to print list
    public void printList(ListNode head) {
        ListNode t = head;
        while (t != null) {
            System.out.print(t.val);
            if (t.next != null) System.out.print(" → ");
            t = t.next;
        }
        System.out.println(" → null");
    }

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		   // build: 1 → 2 → 3 → 4 → 5
        ListNode head = new ListNode(1);
        head.next = new ListNode(2);
        head.next.next = new ListNode(3);
        head.next.next.next = new ListNode(4);
        head.next.next.next.next = new ListNode(5);

        RotateList sol = new RotateList();
        System.out.print("Original: ");
        sol.printList(head);

        ListNode rotated = sol.rotateRight(head, 2);
        System.out.print("Rotated : ");
        sol.printList(rotated);

	}

}
