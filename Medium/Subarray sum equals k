Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [1,1,1], k = 2
Output: 2
Example 2:

Input: nums = [1,2,3], k = 3
Output: 2
 

Constraints:

1 <= nums.length <= 2 * 104
-1000 <= nums[i] <= 1000
-107 <= k <= 107

//CODE

package day5;

import java.util.HashMap;
import java.util.Map;

public class Subarrays_sun_equals_k {
	public class SubarraySumEqualsK {
	    public static int subarraySum(int[] nums, int k) {
	        Map<Integer, Integer> count = new HashMap<>();
	        count.put(0, 1); // base case: one way to have sum=0 before starting

	        int sum = 0;
	        int result = 0;

	        for (int num : nums) {
	            sum += num;

	            // Check how many previous sums would make a subarray of sum=k
	            result += count.getOrDefault(sum - k, 0);
	            count.put(sum, count.getOrDefault(sum, 0) + 1);
	        }
	        return result;
	    }

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		 int[] nums = {1, 1, 1};
	        int k = 2;
	        System.out.println(subarraySum(nums, k));

	}

}
