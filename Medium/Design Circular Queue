Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle, and the last position is connected back to the first position to make a circle. It is also called "Ring Buffer".

One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.

Implement the MyCircularQueue class:

MyCircularQueue(k) Initializes the object with the size of the queue to be k.
int Front() Gets the front item from the queue. If the queue is empty, return -1.
int Rear() Gets the last item from the queue. If the queue is empty, return -1.
boolean enQueue(int value) Inserts an element into the circular queue. Return true if the operation is successful.
boolean deQueue() Deletes an element from the circular queue. Return true if the operation is successful.
boolean isEmpty() Checks whether the circular queue is empty or not.
boolean isFull() Checks whether the circular queue is full or not.
You must solve the problem without using the built-in queue data structure in your programming language. 

 

Example 1:

Input
["MyCircularQueue", "enQueue", "enQueue", "enQueue", "enQueue", "Rear", "isFull", "deQueue", "enQueue", "Rear"]
[[3], [1], [2], [3], [4], [], [], [], [4], []]
Output
[null, true, true, true, false, 3, true, true, true, 4]

Explanation
MyCircularQueue myCircularQueue = new MyCircularQueue(3);
myCircularQueue.enQueue(1); // return True
myCircularQueue.enQueue(2); // return True
myCircularQueue.enQueue(3); // return True
myCircularQueue.enQueue(4); // return False
myCircularQueue.Rear();     // return 3
myCircularQueue.isFull();   // return True
myCircularQueue.deQueue();  // return True
myCircularQueue.enQueue(4); // return True
myCircularQueue.Rear();     // return 4
 

Constraints:

1 <= k <= 1000
0 <= value <= 1000
At most 3000 calls will be made to enQueue, deQueue, Front, Rear, isEmpty, and isFull.

//CODE

package day25;

public class CircularQueueDemo {
    static class MyCircularQueue {
        private int[] arr;
        private int front;
        private int rear;
        private int capacity;

        public MyCircularQueue(int k) {
            capacity = k;
            arr = new int[capacity];
            front = -1;
            rear = -1;
        }

        // Enqueue (add element at the rear)
        public boolean enQueue(int value) {
            if (isFull()) {
                System.out.println("Queue is full! Cannot enqueue " + value);
                return false;
            }
            if (isEmpty()) {
                front = 0;
                rear = 0;
            } else {
                rear = (rear + 1) % capacity;
            }
            arr[rear] = value;
            return true;
        }

        // Dequeue (remove element from the front)
        public boolean deQueue() {
            if (isEmpty()) {
                System.out.println("Queue is empty! Cannot dequeue.");
                return false;
            }
            if (front == rear) {
                // Only one element, queue becomes empty
                front = -1;
                rear = -1;
            } else {
                front = (front + 1) % capacity;
            }
            return true;
        }

        // Get the front element
        public int Front() {
            if (isEmpty()) {
                return -1;
            }
            return arr[front];
        }

        // Get the rear element
        public int Rear() {
            if (isEmpty()) {
                return -1;
            }
            return arr[rear];
        }

        // Check if empty
        public boolean isEmpty() {
            return front == -1;
        }

        // Check if full
        public boolean isFull() {
            return ((rear + 1) % capacity) == front;
        }

        // Print current queue elements (for debugging)
        public void printQueue() {
            if (isEmpty()) {
                System.out.println("Queue is empty");
                return;
            }
            System.out.print("Queue: ");
            int i = front;
            while (true) {
                System.out.print(arr[i] + " ");
                if (i == rear) break;
                i = (i + 1) % capacity;
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        MyCircularQueue q = new MyCircularQueue(5);

        q.enQueue(10);
        q.enQueue(20);
        q.enQueue(30);
        q.printQueue();

        q.deQueue(); // removes 10
        q.printQueue();

        q.enQueue(40);
        q.enQueue(50);
        q.enQueue(60);  // wraps around
        q.printQueue();

        q.deQueue(); // removes 20
        q.deQueue(); // removes 30
        q.printQueue();

        q.enQueue(70);  // reuse slot after wrap
        q.printQueue();

        System.out.println("Front: " + q.Front()); // should be 40
        System.out.println("Rear: " + q.Rear());   // should be 70
        System.out.println("Is Empty? " + q.isEmpty());
        System.out.println("Is Full? " + q.isFull());
    }
}
