Given a string s, find the length of the longest substring without duplicate characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.


//CODE

package day_3;

import java.util.HashSet;

public class Longest_Substring_Without_Repeating_Characters {
	 public static int lengthOfLongestSubstring(String s) 
	 {
	        HashSet<Character> set = new HashSet<>();
	        int left = 0, maxLen = 0;

	        for (int right = 0; right < s.length(); right++) 
	        {
	            while (set.contains(s.charAt(right))) 
	            {
	                set.remove(s.charAt(left));
	                left++;
	            }
	            set.add(s.charAt(right));
	            maxLen = Math.max(maxLen, right - left + 1);
	        }
	        return maxLen;
	    }

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		 String s = "abcabcbb";
	     System.out.println("Longest Substring Length: " + lengthOfLongestSubstring(s)); // 3

	}

}
