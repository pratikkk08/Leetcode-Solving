Given a string s, return the longest palindromic substring in s.

 

Example 1:

Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.
Example 2:

Input: s = "cbbd"
Output: "bb"
 

Constraints:

1 <= s.length <= 1000
s consist of only digits and English letters.

//CODE

package day9;

public class Longest_Plindromic_Substring {
	public static String longestPalindrome(String s) {
        if (s == null || s.length() == 0) return "";

        String t = "^#" + String.join("#", s.split("")) + "#$";
        int n = t.length();
        int[] P = new int[n];
        int C = 0, R = 0;

        for (int i = 1; i < n - 1; i++) {
            int mirror = 2 * C - i;

            if (i < R) {
                P[i] = Math.min(R - i, P[mirror]);
            }
            while (t.charAt(i + 1 + P[i]) == t.charAt(i - 1 - P[i])) {
                P[i]++;
            }
            if (i + P[i] > R) {
                C = i;
                R = i + P[i];
            }
        }
        int maxLen = 0, centerIndex = 0;
        for (int i = 1; i < n - 1; i++) {
            if (P[i] > maxLen) {
                maxLen = P[i];
                centerIndex = i;
            }
        }
        int start = (centerIndex - maxLen) / 2;
        return s.substring(start, start + maxLen);
    }

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		  String[] tests = {"babad", "cbbd", "a", "ac", "abba", "forgeeksskeegfor"};

	        for (String test : tests) {
	            String ans = longestPalindrome(test);
	            System.out.println("Input: " + test + " -> Longest Palindromic Substring: " + ans);
	        }

	}

}
