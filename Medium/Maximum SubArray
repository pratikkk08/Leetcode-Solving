Given an integer array nums, find the subarray with the largest sum, and return its sum.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.
Example 2:

Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104


//CODE

package day1;

public class Maximum_SubArray {
	public static int ms(int[] nums)
	{
		int currsum = nums[0];
		int maxsum = nums[0];
		
		for(int i =1; i< nums.length;i++) {
			currsum = Math.max(nums[i], currsum + nums[i]);
			maxsum = Math.max(maxsum, currsum);
		}
		
		return maxsum;
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] nums = {5, -2, 3, -1, 2};
		System.out.println("Maximum Subarray is :" + ms(nums));

	}

}
