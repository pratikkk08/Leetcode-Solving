Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.

 

Example 1:

Input: temperatures = [73,74,75,71,69,72,76,73]
Output: [1,1,4,2,1,1,0,0]
Example 2:

Input: temperatures = [30,40,50,60]
Output: [1,1,1,0]
Example 3:

Input: temperatures = [30,60,90]
Output: [1,1,0]
 

Constraints:

1 <= temperatures.length <= 105
30 <= temperatures[i] <= 100


//CODE

package day23;
import java.util.*;
public class DailyTemperatures {
	public static int[] dailyTemperatures(int[] T) {
        int n = T.length;
        int[] ans = new int[n];
        Stack<Integer> st = new Stack<>(); // stores indices

        for (int i = 0; i < n; i++) {
            // While current temp is warmer than temp at index on top of stack
            while (!st.isEmpty() && T[i] > T[st.peek()]) {
                int prev = st.pop();
                ans[prev] = i - prev; // number of days waited
            }
            st.push(i); // put current index to wait
        }
        // Remaining indices auto stay 0 (no warmer day)
        return ans;
    }

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] T = {73, 74, 75, 71, 69, 72, 76, 73};
        int[] result = dailyTemperatures(T);

        System.out.print("Result: [");
        for (int i = 0; i < result.length; i++) {
            System.out.print(result[i]);
            if (i < result.length - 1) System.out.print(", ");
        }
        System.out.println("]");

	}

}
