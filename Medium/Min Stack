Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

Implement the MinStack class:

MinStack() initializes the stack object.
void push(int val) pushes the element val onto the stack.
void pop() removes the element on the top of the stack.
int top() gets the top element of the stack.
int getMin() retrieves the minimum element in the stack.
You must implement a solution with O(1) time complexity for each function.

 

Example 1:

Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2
 

Constraints:

-231 <= val <= 231 - 1
Methods pop, top and getMin operations will always be called on non-empty stacks.
At most 3 * 104 calls will be made to push, pop, top, and getMin.


//CODE

package day22;
import java.util.*;
public class MinStack {
	private Stack<Integer> main;   // stores all pushed values
    private Stack<Integer> minSt;  // stores current mins

    public MinStack() {
        main = new Stack<>();
        minSt = new Stack<>();
    }

    // Push x onto stack
    public void push(int x) {
        main.push(x);
        if (minSt.isEmpty() || x <= minSt.peek()) {
            minSt.push(x);
        }
    }

    // Remove the top element
    public void pop() {
        if (main.isEmpty()) return;
        int removed = main.pop();
        if (!minSt.isEmpty() && removed == minSt.peek()) {
            minSt.pop();
        }
    }

    // Return top element
    public int top() {
        if (main.isEmpty()) throw new RuntimeException("Stack is empty");
        return main.peek();
    }

    // Return current minimum
    public int getMin() {
        if (minSt.isEmpty()) throw new RuntimeException("Stack is empty");
        return minSt.peek();
    }


	public static void main(String[] args) {
		// TODO Auto-generated method stub
		 MinStack stack = new MinStack();

	        stack.push(5);
	        stack.push(3);
	        stack.push(7);
	        stack.push(3);

	        System.out.println("Current Min: " + stack.getMin()); // 3

	        stack.pop();
	        System.out.println("Current Min after pop: " + stack.getMin()); // 3

	        stack.pop();
	        System.out.println("Current Min after pop: " + stack.getMin()); // 3

	        stack.pop();
	        System.out.println("Current Min after pop: " + stack.getMin()); // 5

	}

}
