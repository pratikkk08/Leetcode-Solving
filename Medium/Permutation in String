Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

 

Example 1:

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input: s1 = "ab", s2 = "eidboaoo"
Output: false
 

Constraints:

1 <= s1.length, s2.length <= 104
s1 and s2 consist of lowercase English letters.


//CODE

package day10;

import java.util.Arrays;

public class Permutation_in_String {
	  public static boolean checkInclusion(String s1, String s2) {
	        if (s1.length() > s2.length()) return false;

	        int[] count1 = new int[26];
	        int[] count2 = new int[26];

	        // Count frequency of s1
	        for (char c : s1.toCharArray()) {
	            count1[c - 'a']++;
	        }

	        int window = s1.length();

	        // Sliding window over s2
	        for (int i = 0; i < s2.length(); i++) {
	            // add current char to window count
	            count2[s2.charAt(i) - 'a']++;

	            // remove leftmost char when window exceeds size
	            if (i >= window) {
	                count2[s2.charAt(i - window) - 'a']--;
	            }

	            // compare arrays
	            if (Arrays.equals(count1, count2)) {
	                return true;
	            }
	        }
	        return false;
	    }

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		  String s1 = "ab", s2 = "eidbaooo";
	        System.out.println("s1 = " + s1 + ", s2 = " + s2);
	        System.out.println("Contains permutation? " + checkInclusion(s1, s2)); // true

	        s1 = "ab"; s2 = "eidboaoo";
	        System.out.println("s1 = " + s1 + ", s2 = " + s2);
	        System.out.println("Contains permutation? " + checkInclusion(s1, s2)); // false
	    

	}

}
