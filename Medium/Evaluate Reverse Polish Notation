You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.

Evaluate the expression. Return an integer that represents the value of the expression.

Note that:

The valid operators are '+', '-', '*', and '/'.
Each operand may be an integer or another expression.
The division between two integers always truncates toward zero.
There will not be any division by zero.
The input represents a valid arithmetic expression in a reverse polish notation.
The answer and all the intermediate calculations can be represented in a 32-bit integer.
 

Example 1:

Input: tokens = ["2","1","+","3","*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9
Example 2:

Input: tokens = ["4","13","5","/","+"]
Output: 6
Explanation: (4 + (13 / 5)) = 6
Example 3:

Input: tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
Output: 22
Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22
 

Constraints:

1 <= tokens.length <= 104
tokens[i] is either an operator: "+", "-", "*", or "/", or an integer in the range [-200, 200].

//CODE

package day22;
import java.util.*;
public class EvaluateRPN {
	// Evaluate tokens of Reverse Polish Notation and return integer result
    public static int evalRPN(String[] tokens) {
        Stack<Integer> st = new Stack<>();

        for (String t : tokens) {
            if (isOperator(t)) {
                // NOTE: order matters: first popped is right operand (b), then left (a)
                int b = st.pop();
                int a = st.pop();
                int res = applyOp(a, b, t);
                st.push(res);
            } else {
                // token is a number (may be negative). Parse and push.
                st.push(Integer.parseInt(t));
            }
        }

        // final result should be the only item on stack
        return st.pop();
    }

    private static boolean isOperator(String t) {
        return t.equals("+") || t.equals("-") || t.equals("*") || t.equals("/");
    }

    private static int applyOp(int a, int b, String op) {
        switch (op) {
            case "+": return a + b;
            case "-": return a - b;
            case "*": return a * b;
            case "/":
                // Java integer division truncates toward 0 â€” matches typical RPN problems.
                return a / b;
            default: throw new IllegalArgumentException("Unknown operator: " + op);
        }
    }

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		 // Example 1: (2 + 1) * 3 = 9
        String[] ex1 = {"2", "1", "+", "3", "*"};
        System.out.println("Example 1 result: " + evalRPN(ex1)); // expected 9

        // Example 2: 4 + (13 / 5) -> 13/5 = 2 (int) -> 4+2 = 6
        String[] ex2 = {"4", "13", "5", "/", "+"};
        System.out.println("Example 2 result: " + evalRPN(ex2)); // expected 6

        // Example 3: negative numbers and multiple ops -> ((-2) * (3 + 1)) = -8
        String[] ex3 = {"-2", "3", "1", "+", "*"};
        System.out.println("Example 3 result: " + evalRPN(ex3)); // expected -8
    }

	

}
