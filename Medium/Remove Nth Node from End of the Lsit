Given the head of a linked list, remove the nth node from the end of the list and return its head.

 

Example 1:


Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]
Example 2:

Input: head = [1], n = 1
Output: []
Example 3:

Input: head = [1,2], n = 1
Output: [1]
 

Constraints:

The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz
 

Follow up: Could you do this in one pass?

 
//CODE

package day12;

public class RemoveNthFromEnd {
	 public ListNode removeNthFromEnd(ListNode head, int n) {
	        ListNode dummy = new ListNode(-1);
	        dummy.next = head;

	        ListNode slow = dummy; 
	        ListNode fast = dummy; 

	        for (int i = 0; i < n + 1; i++) {
	            fast = fast.next;
	        }

	        while (fast != null) {
	            slow = slow.next;
	            fast = fast.next;
	        }

	        slow.next = slow.next.next;

	        return dummy.next;
	    }
	 
	 public void printList(ListNode head) {
	        ListNode t = head;
	        while (t != null) {
	            System.out.print(t.val + " → ");
	            t = t.next;
	        }
	        System.out.println("null");
	    }

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// build list 1 → 2 → 3 → 4 → 5
        ListNode head = new ListNode(1);
        head.next = new ListNode(2);
        head.next.next = new ListNode(3);
        head.next.next.next = new ListNode(4);
        head.next.next.next.next = new ListNode(5);

        RemoveNthFromEnd sol = new RemoveNthFromEnd();
        System.out.print("Original: ");
        sol.printList(head);

        int n = 2;
        ListNode modified = sol.removeNthFromEnd(head, n);

        System.out.print("After removing " + n + "th from end: ");
        sol.printList(modified);

	}

}
