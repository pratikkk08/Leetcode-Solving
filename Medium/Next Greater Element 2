Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.

The next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return -1 for this number.

 

Example 1:

Input: nums = [1,2,1]
Output: [2,-1,2]
Explanation: The first 1's next greater number is 2; 
The number 2 can't find next greater number. 
The second 1's next greater number needs to search circularly, which is also 2.
Example 2:

Input: nums = [1,2,3,4,3]
Output: [2,3,4,-1,4]
 

Constraints:

1 <= nums.length <= 104
-109 <= nums[i] <= 109

//CODE

package day23;
import java.util.*;
public class NextGreaterElementII {
	 public static int[] nextGreaterElements(int[] nums) {
	        int n = nums.length;
	        int[] ans = new int[n];
	        Arrays.fill(ans, -1);
	        Stack<Integer> st = new Stack<>(); // store indices

	        // Do 2 passes to simulate circular array
	        for (int i = 0; i < 2 * n; i++) {
	            int idx = i % n;
	            while (!st.isEmpty() && nums[idx] > nums[st.peek()]) {
	                ans[st.pop()] = nums[idx];
	            }
	            if (i < n) st.push(idx); // only push in first pass
	        }
	        return ans;
	    }

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		  int[] nums = {1, 2, 1};
	        int[] result = nextGreaterElements(nums);

	        System.out.print("NGE II Result: [");
	        for (int i = 0; i < result.length; i++) {
	            System.out.print(result[i]);
	            if (i < result.length - 1) System.out.print(", ");
	        }
	        System.out.println("]");

	}

}
