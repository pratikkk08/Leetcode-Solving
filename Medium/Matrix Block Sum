Given a m x n matrix mat and an integer k, return a matrix answer where each answer[i][j] is the sum of all elements mat[r][c] for:

i - k <= r <= i + k,
j - k <= c <= j + k, and
(r, c) is a valid position in the matrix.
 

Example 1:

Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 1
Output: [[12,21,16],[27,45,33],[24,39,28]]
Example 2:

Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 2
Output: [[45,45,45],[45,45,45],[45,45,45]]
 

Constraints:

m == mat.length
n == mat[i].length
1 <= m, n, k <= 100
1 <= mat[i][j] <= 100


//CODE

package day5;

public class Matrix_Block_Sum {
	public static int[][] matrixBlockSum(int[][] mat, int K) {
        int m = mat.length, n = mat[0].length;
        int[][] pref = new int[m+1][n+1];

        // Build prefix sum (1-indexed for convenience)
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                pref[i][j] = mat[i-1][j-1] 
                           + pref[i-1][j] 
                           + pref[i][j-1] 
                           - pref[i-1][j-1];
            }
        }

        int[][] ans = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int r1 = Math.max(0, i-K), c1 = Math.max(0, j-K);
                int r2 = Math.min(m-1, i+K), c2 = Math.min(n-1, j+K);

                ans[i][j] = pref[r2+1][c2+1] 
                          - pref[r1][c2+1] 
                          - pref[r2+1][c1] 
                          + pref[r1][c1];
            }
        }
        return ans;
    }

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[][] mat = {{1,2,3},{4,5,6},{7,8,9}};
        int K = 1;
        int[][] ans = matrixBlockSum(mat, K);

        for (int[] row : ans) {
            for (int v : row) System.out.print(v + " ");
            System.out.println();
        }

	}

}
